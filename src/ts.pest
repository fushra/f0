// Static types
STRING = { "\"" ~ ASCII* ~ "\"" }
NUMBER = @{ ASCII_DIGIT+ ~ ("." ~ ASCII_DIGIT+)? }
WHITESPACE = _{ " " }

BOOL_TRUE = { "true" }
BOOL_FALSE = { "false" }
BOOL = _{ BOOL_TRUE | BOOL_FALSE }

NULL = { "null" }

// Full file
program = { SOI ~ NEWLINE* ~ (expression ~ (NEWLINE | ";") ~ NEWLINE*)* ~ EOI }

// Assorted operators
not_equal = { "!=" }
double_equal = { "==" }
triple_equal = { "===" }
greater_than = { ">" }
greater_than_equal = { ">=" }
less_than = { "<" }
less_than_equal = { "<=" }
plus = { "+" }
minus = { "-" }
divide = { "/" }
multiply = { "*" }
inverse = { "!" }

// Expression code
expression = { WHITESPACE* ~ equality ~ WHITESPACE* }

equality = { comparision ~ WHITESPACE* ~ ((not_equal | double_equal | triple_equal) ~ WHITESPACE* ~ comparision)* }
comparision = { term ~ WHITESPACE* ~ ((greater_than | greater_than_equal | less_than | less_than_equal) ~ WHITESPACE* ~ term)* }
term = { factor ~ WHITESPACE* ~ ((minus | plus) ~ WHITESPACE* ~ factor)* }
factor = { unary ~ WHITESPACE* ~ ((divide | multiply) ~ WHITESPACE* ~ unary)* }
unary = { ((inverse | minus) ~ WHITESPACE* ~ unary) | grouping | literal }
grouping = { "(" ~ expression ~ ")" }

literal = _{ WHITESPACE* ~ (STRING | NUMBER | BOOL | NULL) ~ WHITESPACE* }
